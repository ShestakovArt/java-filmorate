DROP TABLE IF EXISTS REVIEW_LIKES;
DROP TABLE IF EXISTS DIRECTOR_TO_FILM;
DROP TABLE IF EXISTS USER_LIKE_FILM;
DROP TABLE IF EXISTS FILM_TO_GENRE;
DROP TABLE IF EXISTS FRIENDSHIP_REQUESTS;
DROP TABLE IF EXISTS DIRECTOR;
DROP TABLE IF EXISTS REVIEWS;
DROP TABLE IF EXISTS FILMS;
DROP TABLE IF EXISTS EVENT;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS GENRE;
DROP TABLE IF EXISTS MPA;

CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID       INTEGER auto_increment,
    USER_EMAIL    CHARACTER VARYING(50) NOT NULL,
    USER_LOGIN    CHARACTER VARYING(50) NOT NULL,
    USER_NAME     CHARACTER VARYING(50),
    USER_BIRTHDAY DATE,
    CONSTRAINT USERS_PK PRIMARY KEY (USER_ID),
    CONSTRAINT UNIQUE_LOGIN UNIQUE (USER_LOGIN)
);

CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID   INTEGER auto_increment,
    MPA_NAME VARCHAR(10) NOT NULL,
    CONSTRAINT MPA_PK PRIMARY KEY (MPA_ID)
);

CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID             INTEGER auto_increment,
    FILM_NAME           CHARACTER VARYING(50)  NOT NULL,
    MPA_ID              INTEGER                NOT NULL,
    FILM_DESCRIPTION    CHARACTER VARYING(200) NOT NULL,
    FILM_RELEASE_DATE   DATE                   NOT NULL,
    FILM_DURATION       INTEGER                NOT NULL,
    FILM_RATE           INTEGER DEFAULT 0,
    FILM_RATE_AND_LIKES INTEGER DEFAULT 0,
    CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID),
    CONSTRAINT FILMS_FK FOREIGN KEY (MPA_ID) REFERENCES MPA
);

CREATE TABLE IF NOT EXISTS GENRE
(
    GENRE_ID   INTEGER auto_increment,
    GENRE_NAME CHARACTER VARYING(20) NOT NULL,
    CONSTRAINT GENRE_PK PRIMARY KEY (GENRE_ID)
);

CREATE TABLE IF NOT EXISTS EVENT
(
    EVENT_ID        INTEGER auto_increment,
    TIMESTAMP_EVENT LONG,
    USER_ID         INTEGER REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    EVENT_TYPE      CHARACTER VARYING(50) NOT NULL,
    OPERATION       CHARACTER VARYING(50) NOT NULL,
    ENTITY_ID       INTEGER               NOT NULL,
    CONSTRAINT EVENT_PK PRIMARY KEY (EVENT_ID)
);

CREATE TABLE IF NOT EXISTS FRIENDSHIP_REQUESTS
(
    SENDER_ID    INTEGER               NOT NULL,
    RECIPIENT_ID INTEGER               NOT NULL,
    PROOF        BOOLEAN DEFAULT FALSE NOT NULL,
    PRIMARY KEY (SENDER_ID, RECIPIENT_ID),
    CONSTRAINT FRIENDSHIP_REQUESTS_SENDER_USER_ID_FK
        FOREIGN KEY (SENDER_ID) REFERENCES USERS (USER_ID),
    CONSTRAINT FRIENDSHIP_REQUESTS_RECIPIENT_USER_ID_FK
        FOREIGN KEY (RECIPIENT_ID) REFERENCES USERS (USER_ID)
);

CREATE TABLE IF NOT EXISTS FILM_TO_GENRE
(
    FILM_ID  INTEGER NOT NULL,
    GENRE_ID INTEGER NOT NULL,
    PRIMARY KEY (FILM_ID, GENRE_ID),
    CONSTRAINT FILM_TO_GENRE_FILMS_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILMS,
    CONSTRAINT FILM_TO_GENRE_GENRE_FK
        FOREIGN KEY (GENRE_ID) REFERENCES GENRE
);

CREATE TABLE IF NOT EXISTS USER_LIKE_FILM
(
    FILM_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    PRIMARY KEY (FILM_ID, USER_ID),
    CONSTRAINT USER_LIKE_FILM_USERS_ID_FK
        FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    CONSTRAINT USER_LIKE_FILM_FILMS_ID_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILMS (FILM_ID)
);

CREATE TABLE IF NOT EXISTS DIRECTOR
(
    DIRECTOR_ID   INTEGER auto_increment,
    DIRECTOR_NAME CHARACTER VARYING(20) NOT NULL,
    CONSTRAINT DIRECTOR_PK PRIMARY KEY (DIRECTOR_ID)
);

CREATE TABLE IF NOT EXISTS DIRECTOR_TO_FILM
(
    FILM_ID     INTEGER NOT NULL,
    DIRECTOR_ID INTEGER NOT NULL,
    PRIMARY KEY (FILM_ID, DIRECTOR_ID),
    CONSTRAINT DIRECTOR_TO_FILM_FILMS_FK
        FOREIGN KEY (FILM_ID) REFERENCES FILMS,
    CONSTRAINT DIRECTOR_TO_FILM_DIRECTOR_FK
        FOREIGN KEY (DIRECTOR_ID) REFERENCES DIRECTOR
);

CREATE TABLE IF NOT EXISTS REVIEWS
(
    REVIEW_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CONTENT   TEXT    NOT NULL,
    POSITIVE  BOOLEAN,
    USEFUL    INTEGER NOT NULL DEFAULT 0,
    USER_ID   INTEGER REFERENCES USERS (USER_ID) ON DELETE NO ACTION,
    FILM_ID   INTEGER REFERENCES FILMS (FILM_ID) ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS REVIEW_LIKES
(
    REVIEW_ID INTEGER REFERENCES REVIEWS (REVIEW_ID) ON DELETE NO ACTION,
    USER_ID   INTEGER REFERENCES USERS (USER_ID) ON DELETE NO ACTION,
    STATUS    BOOLEAN,
    -- LIKE*(true), DISLIKE *(false)
    CONSTRAINT PK_REVIEW_LIKES PRIMARY KEY (REVIEW_ID, USER_ID, STATUS)
);
